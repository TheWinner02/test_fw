name: Download e Estrai Firmware Samsung

on:  
  workflow_dispatch:  # Permette di eseguire manualmente il workflow

jobs:
  download_firmware:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Scarica Firmware
      run: |
        # Usando curl per scaricare il firmware da una URL
        curl -L https://dl.samfwpremium.cloud/e61d67b6c07db2f873df4b8347bb543aEHmB4rW6WWe9GCUu0jQsi6rhUkifcLERyKY6r4WgznXaqTRA8R-AgbUf0P3VeZPVpwxPXpwgCVCGg4Oc8B2EaHpoLX39fioEDVKT8EOhNoZjU2LKNln87pbVP3O9iNjrleFwr9zryEzvEKxFUsUZ1u6OOPBNkKMUD7ceOzjVwqgwbiAxsd4jdHaCfUb_ipwyvdhhlcBULP2BuUZzmOq5fQa89Xm9kf0bsi7SYHP59ZsONJbJuOaWm-PBIkl8W4A53EZiGBdk74J05kYtT0p6Juqod2agQ2tEuE8rXJEAzHHFif3e8srFqf55_4yKNLsdm3_PXaxiC5AhqkBcEePILJ3GpQfadSIX4etdwqra--OFCbKONyCFDM1D19mqrqZ7LsQEyxs7wpz7HVDHOdZN9mACWBZm--tnKnlAnxvQuFgk0evVRwDWpwr70SEWgx5Ed8rVdZDYmuajG3ikKIg_sHy1L-2LpFck6BGEIXmj8uKfKc5DB_DIRzIreZP55FcF-8zJPHIqQCw3aGDmO7YTNDnQ_spsImT0YtKh_mCwGE7q0GxP2ExhAd1fhgwQbBQe-bZvcq_zvy5v0S-ZXUhxOzb5SasoHST5MxZ_8tu3h6j6Z4ndDeEpyOvT2KCvF9eM8CkY2DMc8uckeZhXDC8tzPy6uEik17t6vc28OXEdon3ybUB68jzTyHoT8MFaeTtp_vLZtPuyo9ESqFgkN0_1zfhtzAfl34ok-Vrk21y_GGNaXrzKL_jCpqybnRLup1ZTvhT6dwD5aPcXowBhBFZM2Pih9p1umhoW43_nurk7Dl4CO3ELuJl6puxuSkWhjeaCBdxTGGwuqqduArDduC2EGRaoglcCq4c7kHL5F2HCN_DalwoHoKWf03IbiSmMNkseyg2dqi_zN1GnWeyD3XIPGqiKtVxY94Z4nvydXjAr9jvddemUFMVqF47Zz7LD4uZiw-InKNcrcnPenbjGCc9_pJVpIj5Yp7iZ0ic8PKknqniiUV2qPQgtpHcDXaYjRIz0ZHbF05IuqXZcAHwPuDIRO-AO9NpJytG2mCzz4AstM3IHMMzm9EJPJhy3W0TtubpsScrpIkV3eE-iDulIwIY2gQ?file_name=SAMFW.COM_SM-A536B_EUX_A536BXXSDEYB1_fac.zip -o firmware.zip

    - name: Estrai Firmware.zip
      run: |
        # Estrai il firmware se è in formato zip
        unzip firmware.zip -d firmware && rm -rf firmware.zip
        rm -rf firmware/BL*.tar.md5 && rm -rf firmware/CP*.tar.md5 && rm -rf firmware/HOME*.tar.md5 && rm -rf firmware/*.txt

    - name: Estrai md5
      run: |
        # Estrai il firmware se è in formato md5
        tar -xf firmware/AP*.tar.md5 super.img.lz4 && rm -rf firmware/AP*.tar.md5
        tar -xf firmware/CSC*.tar.md5 optics.img.lz4 && tar -xf firmware/CSC*.tar.md5 prism.img.lz4
        rm -rf firmware

    - name: Estrai lz4
      run: |
        # Estrai il firmware se è in formato lz4
        lz4 -d -q --rm super.img.lz4 super.img.sparse && lz4 -d -q --rm optics.img.lz4 optics.img.sparse && lz4 -d -q --rm prism.img.lz4 prism.img.sparse

    - name: Installa simg2img
      run: |
        # Installa simg2img
        sudo apt-get update && sudo apt-get install android-sdk-libsparse-utils

    - name: Converti Sparse in Raw
      run: |
        # Converti sparse in raw
        simg2img super.img.sparse super.img && rm -rf super.img.sparse
        simg2img optics.img.sparse optics.img && rm -rf optics.img.sparse
        simg2img prism.img.sparse prism.img && rm -rf prism.img.sparse
        
    - name: Comprimi Firmware
      run: |
        # Comprimi il firmware
        zip -r -9 -FS -m firmware.zip super.img optics.img prism.img
        
    - name: Crea Release GitHub
      id: create_release
      run: |
           # Crea una nuova release su GitHub usando il GITHUB_TOKEN predefinito
            response=$(curl -X POST \
           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -d '{"tag_name": "fw", "name": "Firmware", "body": "Release del firmware estratto.", "draft": false, "prerelease": false}' \
            https://api.github.com/repos/${{ github.repository }}/releases)
            release_id=$(echo $response | jq -r '.id')
            echo "release_id=$release_id" >> $GITHUB_ENV
      

    - name: Carica Firmware Estratto come Asset
      run: |
            # Carica il firmware estratto come asset nella release appena creata
            curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --upload-file @firmware.zip \
            https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=firmware.zip
