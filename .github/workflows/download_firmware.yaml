name: Download e Estrai Firmware Samsung

on:  
  workflow_dispatch:  # Permette di eseguire manualmente il workflow

jobs:
  download_firmware:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Scarica Firmware
      run: |
        # Usando curl per scaricare il firmware da una URL
        curl -L https://dl.samfwpremium.cloud/b7027b89e156f333af7b48714c3acdd1rY43IV6zdnJJQF_UwWL39lqQ1PjbQa00dluXlrhv9tySu89bkv_e1CZdBgAn9nTjFmWH3jhuC1C7KnvteFaC2Xsl8k44CPi0RBd5dAGgHwtiZsTpOwF_Z_xmX4_58wccUxEopPUKPlBjgEe1ohvzFm0F7PEcJ-epu2YkdzJUdYN97u8NMRabem6KdBDdDpfvwPsX7CXor7QTeHz_vdz6aMxnTOX1AdZPvA9_d3L0LSmMSXx6GJJ7OAqGzfe-jNBbCrIoGRWnEk-GojdM5n4iZXII8EgaUpA1Y4Q1dQHm0yC0sZGITdMDrK1fPmGY2T_mfuWe011zR_PqSrOqrG6eliKOnvlBV3qBKA8hLfsbE315d1Cwo55BmeHkuXvvG9xIoLIfPInewacbCR5xCdz9911xIYo6Cp8Y4o2XqtSFnPS3IgmcbXZ5LDEH3l49exvXMb6F36oaJNwP0DBdOPARbC9nqBL9jRp15HPvbxc5i9h4qjc43JCxEiU0HFeBl8vCek0CaSUaVzGMtp2CQDKzAuLeYNUabNX-a5h9TisOwHzdw2Cl7pQejIurkYr4jQSJgXaWD2bt-rgnTHFfrnsAP3LDif5riJxqEmfWTspqmfgGbXgT6UTQrunsm2ACv8GP6JrC76IPwNfr0hPzx_dnn7tWT6jgKK8CAe750uFGjBIna3reokS-wJ2pu9IaUBJhScLjyULwyUv95MptOSw3y05JBAwaaEvNyJ8l_Z-vLwkVfUXX6gW21FYgPXqvkupI1ALtTk2IEMGjDjmFyP7oXXQJXM_6HyV7F2c0DYy3OEt5-GUcGVYusJ-TRsT29UwqzHg63_PUng_J36VNu0XRjo13nXkEoNYYfC_Q-4_tRLJWHac7Nf38gbldc4XSQ81k7NSzQQc1iwjnzXUA-b2QEH4en_vwqg12cSk_lt2jMkL1FreYAQ-eiH27LWxEndp4rr92IxD8ojA_-KqDNzLJzAtaCew86q168_vhFqO96EmVqXr4qDRyFBpGyKVu4g8O_rEJjJgd0DHRLsvU80jq8ReUA1lNCk5X4Bg67r7s0d1cOTXLj3mL5yZu6CbuUW5BiZ-9iYiLWiSpE0cf4bM7EA?file_name=CSC_OXM_A536BOXMDEYB1_MQB91722882_REV00_user_low_ship_MULTI_CERT.tar.md5.zip -o firmware.zip

    - name: Estrai Firmware.zip
      run: |
        # Estrai il firmware se è in formato zip
        unzip firmware.zip -d firmware && rm -rf firmware.zip

    - name: Estrai md5
      run: |
        # Estrai il firmware se è in formato md5
        tar -xf firmware/*.tar.md5 && rm -rf firmware

    - name: Estrai lz4
      run: |
        # Estrai il firmware se è in formato lz4
        lz4 -d -q --rm optics.img.lz4 optics.img.sparse && lz4 -d -q --rm prism.img.lz4 prism.img.sparse

    - name: Installa simg2img
      run: |
        # Installa simg2img
        sudo apt-get update && sudo apt-get install android-sdk-libsparse-utils

    - name: Converti Sparse in Raw
      run: |
        # Converti sparse in raw
        simg2img optics.img.sparse optics.img && rm -rf optics.img.sparse
        simg2img prism.img.sparse prism.img && rm -rf prism.img.sparse
        
    - name: Comprimi Firmware
      run: |
        # Comprimi il firmware
        zip -r -9 -FS -m firmware.zip optics.img prism.img
        
    - name: Crea Release GitHub
      id: create_release
      run: |
           # Crea una nuova release su GitHub usando il GITHUB_TOKEN predefinito
            response=$(curl -X POST \
           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -d '{"tag_name": "fw", "name": "Firmware", "body": "Release del firmware estratto.", "draft": false, "prerelease": false}' \
            https://api.github.com/repos/${{ github.repository }}/releases)
            release_id=$(echo $response | jq -r '.id')
            echo "release_id=$release_id" >> $GITHUB_ENV
      

    - name: Carica Firmware Estratto come Asset
      run: |
            # Carica il firmware estratto come asset nella release appena creata
            curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @firmware.zip \
            https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=firmware.zip
