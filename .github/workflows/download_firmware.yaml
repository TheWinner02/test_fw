name: Download e Estrai Firmware Samsung (spazio ottimizzato + monitoraggio)

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: "Inserisci l'URL diretto del firmware (.zip o .tar.md5)"
        required: true
        type: string

jobs:
  estrai_firmware:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # üßπ LIBERA SPAZIO SU DISCO
    - name: Free disk space (1/3)
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo docker builder prune -a
        df -h /

    - name: Free disk space (2/3)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true

    - name: Free disk space (3/3)
      uses: rokibhasansagar/slimhub_actions@main
      with:
        retain: 'compiler_cmake'

    # üîß FUNZIONE PER MONITORARE E CONTROLLARE LO SPAZIO
    - name: Definisci funzione monitor_spazio
      run: |
        echo '#!/bin/bash
        FREE=$(df --output=avail -BG / | tail -1 | sed "s/G//")
        echo "üìä Spazio libero: ${FREE} GB"
        if [ "$FREE" -lt 1 ]; then
          echo "‚ùå ERRORE: spazio insufficiente (<1 GB)"
          exit 1
        fi' | sudo tee /usr/local/bin/monitor_spazio > /dev/null
        sudo chmod +x /usr/local/bin/monitor_spazio

    # ‚öôÔ∏è INSTALLAZIONE DIPENDENZE
    - name: Installa dipendenze necessarie
      run: |
        sudo apt update
        DEBIAN_FRONTEND=noninteractive sudo apt install -yq \
          unzip lz4 android-sdk-libsparse-utils attr ccache clang ffmpeg golang \
          libbrotli-dev libgtest-dev libprotobuf-dev libunwind-dev libpcre2-dev \
          libzstd-dev lld protobuf-compiler webp wget git
        monitor_spazio

    # üì• DOWNLOAD FIRMWARE
    - name: Scarica Firmware
      run: |
        mkdir -p firmware
        echo "üì• Download del firmware da: ${{ github.event.inputs.firmware_url }}"
        curl -L "${{ github.event.inputs.firmware_url }}" -o firmware/firmware.zip
        ls -lh firmware
        monitor_spazio

    # üì¶ ESTRAZIONE ZIP
    - name: Estrai firmware.zip
      run: |
        unzip firmware/firmware.zip -d firmware
        rm -f firmware/firmware.zip
        echo "‚úÖ Estrazione completata"
        ls firmware
        monitor_spazio

    # üîß ESTRAZIONE TAR.MD5
    - name: Estrai file .tar.md5
      run: |
        cd firmware
        for f in *.tar.md5; do
          echo "üì¶ Estrazione di $f"
          tar -xf "$f"
          rm -f "$f"
        done
        echo "‚úÖ File .tar.md5 rimossi"
        ls -lh
        monitor_spazio

    # üîπ DECOMPRESSIONE SUPER.IMG.LZ4
    - name: Estrai super.img.lz4
      run: |
        cd firmware
        if ls super.img.lz4 1> /dev/null 2>&1; then
          echo "üîπ Decompressione super.img.lz4"
          lz4 -d super.img.lz4 super.img.sparse
          rm -f super.img.lz4
        fi
        mv super.img.sparse ../super.img.sparse
        cd ..
        rm -rf firmware
        monitor_spazio

    # üî∏ CONVERSIONE IN RAW
    - name: Converti sparse in raw
      run: |
        echo "üî∏ Conversione in formato RAW"
        simg2img super.img.sparse super.img
        rm -f super.img.sparse
        monitor_spazio

    # üß∞ INSTALLAZIONE LPUNPACK
    - name: Installa lpunpack (mirror GitHub)
      run: |
        git clone --depth=1 https://github.com/Exynos-nibba/lpunpack-lpmake-mirror.git
        sudo mv lpunpack-lpmake-mirror/lpunpack /usr/local/bin/lpunpack
        sudo chmod +x /usr/local/bin/lpunpack
        rm -rf lpunpack-lpmake-mirror
        monitor_spazio

    # üóÇÔ∏è ESTRAZIONE PARTIZIONI
    - name: Estrai partizioni da super.img
      run: |
        mkdir extracted
        echo "üìÇ Estrazione partizioni da super.img..."
        lpunpack super.img extracted/
        rm -f super.img
        echo "‚úÖ Estrazione completata"
        ls -lh extracted
        monitor_spazio

    # üóúÔ∏è COMPRESSIONE FINALE
    - name: Comprimi partizioni estratte
      run: |
        echo "üóúÔ∏è Compressione finale..."
        zip -r -9 firmware_parts.zip extracted
        rm -rf extracted
        ls -lh firmware_parts.zip
        monitor_spazio

    # üîê UPLOAD SU SOURCEFORGE
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SF_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan frs.sourceforge.net >> ~/.ssh/known_hosts
        monitor_spazio

    - name: Upload su SourceForge
      run: |
        scp firmware_parts.zip thewinner02@frs.sourceforge.net:/home/frs/project/oneui-ports/test/
        echo "‚úÖ Upload completato su SourceForge"
        monitor_spazio
